# Author: Gregor Boehl [mail@gregorboehl.com]
---
name: 'hank_model'
description: 'A small example HANK model with endogenous labor supply'
functions_file: 'hank_model_functions.py'

definitions: |
    from jax.numpy import log, maximum
    from econpizza.tools import percentile, jax_print
    
    a_n = 90
    a_max = 80
    a_min = -2
    cutoff_value_specific = 0
    a_grid = new_special_grid(a_max, a_n, a_min, cutoff=True, cutoff_value = cutoff_value_specific)
    
variables: [ div, y, y_prod, w, pi, R, Rn, Rr, Rstar, tax, z, beta, C, N, B, Top10C, Top10A, lower_bound_a, MPC, D_o_Y ]
parameters: [ sigma_c, sigma_l, theta, psi, phi_pi, phi_y, rho, rho_beta, rho_r, rho_z, chi, rho_a, db ]
shocks: [ e_beta, e_rstar, e_z ]

distributions:
  dist:
    skills:
      type: exogenous_rouwenhorst
      rho: 0.98
      sigma: 0.6
      n: 8
    a:
      type: endogenous_generic
      n: (a_n - cutoff_value_specific)

decisions:
  inputs: [VaPrime]
  calls: |
    trans = transfers(skills_stationary, div, tax, skills_grid)
    we = wages(w, skills_grid)
    VaPrimeExp = skills_transition @ VaPrime
    Va, a, c, n, mpc = hh_borrowing(VaPrimeExp, a_grid, we, trans, Rr, beta, sigma_c, sigma_l, chi, lower_bound_a, db)
    n = labor_supply(n, skills_grid)
  outputs: [a,c,n,mpc]

aux_equations: |
    # Aggregation
    aggr_a = jnp.sum(dist*a, axis=(0,1))
    aggr_c = jnp.sum(dist*c, axis=(0,1))
    aggr_n = jnp.sum(dist*n, axis=(0,1))
    
    # Calculate consumption and wealth share of top-10% cumsumers
    top10c = 1 - percentile(c, dist, .9)
    top10a = 1 - percentile(a, dist, .9)
    
    # Calculate aggregate MPC and debt
    aggr_mpc = jnp.sum(dist*mpc, axis=(0,1))
    aggr_debt = -jnp.sum(jnp.where((a <= 0), dist*a, 0), axis=(0, 1))
    
equations:
    # Definitions
    ~ C = aggr_c # aggregate consumption
    ~ Top10C = top10c
    ~ Top10A = top10a
    ~ MPC = aggr_mpc # aggregate marginal propensity to consume
    ~ D_o_Y = aggr_debt/y # household debt-to-GDP

    # firms
    ~ N = y_prod/z # production function
    ~ div = - w*N + (1 - psi*(pi/piSS - 1)**2/2)*y_prod # dividends
    ~ y = (1 - psi*(pi/piSS - 1)**2/2)*y_prod # "effective" output
    ~ psi*(pi/piSS - 1)*pi/piSS = (1-theta) + theta*w/z + psi*piPrime/R*(piPrime/piSS - 1)*piPrime/piSS*y_prodPrime/y_prod # NKPC

    # fiscal policy
    ~ tax = (Rr-1)*B # government budget
    ~ Rr = RLag/pi # ex-post real interest rate
    
    # monetary policy
    ~ Rn = (Rstar*((pi/piSS)**phi_pi)*((y/yLag)**phi_y))**(1-rho)*RnLag**rho # notional nominal rate
    ~ R = maximum(1, Rn) # ZLB

    # clearings
    ~ C = y # market clearing
    ~ aggr_a = B # bond market clearing
    ~ aggr_n = N # labor market clearing

    # exogenous
    ~ beta = betaSS*(betaLag/betaSS)**rho_beta*exp(e_beta) # exogenous beta
    ~ Rstar = RstarSS*(RstarLag/RstarSS)**rho_r*exp(e_rstar) # exogenous rstar
    ~ z = zSS*(zLag/zSS)**rho_z*exp(e_z) # exogenous technology
    
    ~ lower_bound_a = lower_bound_aSS*(lower_bound_aLag/lower_bound_aSS)**rho_a # exogenous borrowing limit

steady_state:
    fixed_values:
        # fix some values
        beta: 0.97 # discount factor
        sigma_c: 2. # intertemporal elasticity of substitution
        sigma_l: 2. # inverse Frisch elasticity of labour supply
        theta: 10. # elasticity of substitution
        psi: 100. # parameter on the costs of price adjustment
        phi_pi: 1.5 # Taylor rule coefficient on inflation
        phi_y: 0.1 # Taylor rule coefficient on output
        rho: 0.8 # persistence in (notional) nominal interest rate
        rho_beta: 0.9 # persistence of discount factor shock
        rho_r: 0.9 # persistence of MP shock
        rho_z: 0.9 # persistence of technology shocks
        db: 0.01 # step size in MPC calculation
        rho_a: 0.5
        lower_bound_a: -2 # borrowing limit

        # steady state
        y: 1. # effective output
        N: 1. # labor supply
        z: 1. # technology
        pi: 1.0 # inflation
        B: 3. # bond supply
        w: (theta-1)/theta # wages
        div: 1 - w*N # dividends

    init_guesses:
        # guess initial values
        chi: 1. # utility weight on disutility of labor
        tax: 0.028 # taxes
        Rstar: 1.006 # steady state target rate
        Rr: Rstar # ex-post real rate
        R: Rstar
        Rn: Rstar # notional nominal interest rate
        we: wages(w, skills_grid)
        T: transfers(skills_stationary, div, tax, skills_grid)
        VaPrime: hh_init(a_grid, we, Rr, sigma_c, T) # initialise value function
